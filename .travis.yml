language: cpp
sudo: false

env:
  global:
    - BUILD_SYSTEM=cmake
    - BOOST_URL='https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.bz2'
    - BOOST_ROOT=$TRAVIS_BUILD_DIR/_cache/boost_1_69_0
    - EP_CACHE_ROOT=$TRAVIS_BUILD_DIR/_cache/cmake_ep
    - CMAKE_ROOT=$TRAVIS_BUILD_DIR/_cache/cmake
    - LCOV_ROOT=$TRAVIS_BUILD_DIR/_cache/lcov
    - VALGRIND_ROOT=$TRAVIS_BUILD_DIR/_cache/valgrind
    # enable this once ready for warnings-as-errors in travis builds:
    # - CMAKE_EXTRA_OPTS="-Dwerr=ON"
cache:
  timeout: 1000
  directories:
    - _cache

addons:
  apt:
    sources: &base_linux_sources
      - ubuntu-toolchain-r-test
    packages: &base_linux_packages
      - software-properties-common
      - wget
      - python-software-properties
      - libstdc++6
      - binutils-gold
      - gdb
      - make
      - ninja-build
      - ccache
      - python-pip
      - npm
      - libc6-dbg

matrix:
  include:
    # Documentation build
    - os: linux
      dist: focal
      env: COMMENT=docs
      addons:
        apt:
          packages:
            - docbook
            - docbook-xml
            - docbook-xsl
            - xsltproc
            - libsaxonhe-java
            - default-jre-headless
      install:
        - cd ..
        - mkdir tmp && cd tmp
        - git clone -b 'Release_1_8_15' --depth 1 https://github.com/doxygen/doxygen.git
        - cd doxygen
        - cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=Release
        - cd build
        - sudo make install
        - cd ../..
        - wget -O saxonhe.zip https://sourceforge.net/projects/saxon/files/Saxon-HE/9.9/SaxonHE9-9-1-4J.zip/download
        - unzip saxonhe.zip
        - sudo rm /usr/share/java/Saxon-HE.jar
        - sudo cp saxon9he.jar /usr/share/java/Saxon-HE.jar
        - cd $TRAVIS_BUILD_DIR
        - pwd
        - git submodule update --init doc/docca
        - cd doc
        - chmod 755 makeqbk.sh
        - ./makeqbk.sh
        - cd ..
        - "sed -i 's,path-constant TEST_MAIN : $(BOOST_ROOT)/boost/beast/_experimental/unit_test/main.cpp ;,,' Jamroot"
        - cd ..
        - BOOST_BRANCH=develop && [ "$TRAVIS_BRANCH" == "master" ] && BOOST_BRANCH=master || true
        - git clone -b $BOOST_BRANCH https://github.com/boostorg/boost.git boost-root
        - cd boost-root
        - export BOOST_ROOT=$(pwd)
        - git submodule update --init libs/context
        - git submodule update --init tools/boostbook
        - git submodule update --init tools/boostdep
        - git submodule update --init tools/docca
        - git submodule update --init tools/quickbook
        - rsync -av $TRAVIS_BUILD_DIR/ libs/nudb
        - python tools/boostdep/depinst/depinst.py ../tools/quickbook
        - ./bootstrap.sh
        - ./b2 headers
      script:
        - |-
          echo "using doxygen ; using boostbook ; using saxonhe ;" > tools/build/src/user-config.jam
        - ./b2 -j3 libs/nudb/doc//boostdoc
    - os: linux
      compiler: gcc-7
      dist: xenial
      addons:
        apt:
          packages:
            - g++-7
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=coverage
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
    - os: osx
      osx_image: xcode10.1
      addons:
        homebrew:
          packages:
            - bash
            - ninja
          update: true
      env:
        - VARIANT=debug
    - os: osx
      osx_image: xcode10.1
      addons:
        homebrew:
          packages:
            - bash
            - ninja
          update: true
      env:
        - VARIANT=release
    - os: linux
      compiler: gcc-5
      dist: xenial
      addons:
        apt:
          packages:
            - g++-5
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=gcc-5 && CXX=g++-5"
    - os: linux
      compiler: gcc-6
      dist: xenial
      addons:
        apt:
          packages:
            - g++-6
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=gcc-6 && CXX=g++-6"
    - os: linux
      compiler: gcc-7
      dist: xenial
      addons:
        apt:
          packages:
            - g++-7
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
    - os: linux
      compiler: gcc-8
      dist: xenial
      addons:
        apt:
          packages:
            - g++-8
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
    - os: linux
      compiler: gcc-8
      dist: xenial
      addons:
        apt:
          packages:
            - g++-8
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=release
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
    - os: linux
      compiler: gcc-8
      dist: xenial
      addons:
        apt:
          packages:
            - g++-8
            - *base_linux_packages
          sources:
            - *base_linux_sources
      env:
        - VARIANT=reldeb
        - WITH_VALGRIND=1
        - MATRIX_EVAL="CC=gcc-8 && CXX=g++-8"
      before_script:
        - scripts/install-valgrind.sh
        - export PATH="${VALGRIND_ROOT}/bin:${PATH}"
    - os: linux
      compiler: clang-6.0
      dist: xenial
      addons:
        apt:
          packages:
            - *base_linux_packages
            - clang-6.0
          sources:
            - *base_linux_sources
            - llvm-toolchain-xenial-6.0
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=clang-6.0 && CXX=clang++-6.0"
    - os: linux
      compiler: clang-7
      dist: xenial
      addons:
        apt:
          packages:
            - *base_linux_packages
            - clang-7
          sources:
            - *base_linux_sources
            - llvm-toolchain-xenial-7
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=clang-7 && CXX=clang++-7"
    - os: linux
      compiler: clang-8
      dist: xenial
      addons:
        apt:
          packages:
            - *base_linux_packages
            - clang-8
          sources:
            - *base_linux_sources
            - llvm-toolchain-xenial-8
      env:
        - VARIANT=debug
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8"
    - os: linux
      compiler: clang-8
      dist: xenial
      addons:
        apt:
          packages:
            - *base_linux_packages
            - clang-8
            - libclang-common-8-dev
          sources:
            - *base_linux_sources
            - llvm-toolchain-xenial-8
      env:
        - VARIANT=usan
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8"
        - UBSAN_OPTIONS='print_stacktrace=1'
        - UBSAN_SYMBOLIZER_PATH=$(which llvm-symbolizer-8)
    - os: linux
      compiler: clang-8
      dist: xenial
      addons:
        apt:
          packages:
            - *base_linux_packages
            - clang-8
            - libclang-common-8-dev
            - llvm-8
          sources:
            - *base_linux_sources
            - llvm-toolchain-xenial-8
      env:
        - VARIANT=asan
        - MATRIX_EVAL="CC=clang-8 && CXX=clang++-8"
      before_script:
        - sudo ln -s $(which llvm-symbolizer-8) /usr/bin/llvm-symbolizer
# TODO: windows slaves in travis are very buggy and slow (2019/03/22)
#   revisit when they improve
#    - os: windows
#      env:
#        # GENERATOR not currently used, but there to make cache key unique
#        - GENERATOR=msvc
#        - MATRIX_EVAL="CC=cl.exe && CXX=cl.exe"
#      install:
#        - choco upgrade cmake.install
#        - scripts/install-boost.sh
#      script:
#        - mkdir -p build.ms && cd build.ms
#        - cmake -G "Visual Studio 15 2017 Win64" -DCMAKE_VERBOSE_MAKEFILE=ON ..
#        - travis_wait 35 cmake --build . -j 2 --verbose --config Debug
#        - ./test/Debug/test-all.exe
#        - ./bench/Debug/bench.exe --batch_size=10000 --num_batches=100
#    - os: windows
#      env:
#        # GENERATOR not currently used, but there to make cache key unique
#        - GENERATOR=ninja
#        - MATRIX_EVAL="CC=cl.exe && CXX=cl.exe"
#      install:
#        - choco upgrade cmake.install
#        - |-
#          ls -la $BOOST_ROOT || echo "boost path not found"
#        - scripts/install-boost.sh
#        - choco install ninja
#        - choco install visualstudio2017-workload-vctools -y
#      script:
#        - . ./scripts/setup-msvc.sh
#        - mkdir -p build.ninja && cd build.ninja
#        - cmake -G Ninja -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=Debug ..
#        - travis_wait 35 cmake --build . -j 2 --verbose
#        - ./test/test-all.exe
#        - ./bench/bench.exe --batch_size=10000 --num_batches=100

before_install:
  - if [ "${MATRIX_EVAL}" != "" ] ; then eval "${MATRIX_EVAL}"; fi

install:
  - scripts/install-cmake.sh 3.14.0
  - if [ $(uname) = "Darwin" ] ; then export PATH="${CMAKE_ROOT}/CMake.app/Contents/bin:${PATH}"; fi
  - if [ $(uname) = "Linux" ] ; then export PATH="${CMAKE_ROOT}/bin:${PATH}"; fi
  - scripts/install-boost.sh
  - scripts/install-coverage.sh
  - export PATH="${LCOV_ROOT}/bin:${PATH}"

script:
  - travis_wait 35 scripts/build-and-test.sh

notifications:
  email:
    false
